/*Animation of h1, 1st part, "Outdoors" (heading-primary-main)*/
@keyframes moveInLeft {
  0% {
    opacity: 0;
    /*Starts invisible*/
    transform: translateX(-10rem);
    /*Starts on the left*/ }
  80% {
    /*Pass over the center and goes 15px to the right */
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    /*Regains Visibility*/
    transform: translateX(0);
    /*Returns 15px back to the center*/ } }

/*Animation of h1, 2nd part, "is where..." (heading-primary-sub)*/
@keyframes moveInRight {
  0% {
    opacity: 0;
    /*Starts invisible*/
    transform: translateX(10rem);
    /*Starts on the right*/ }
  80% {
    /*Pass over the center and goes 15px to the left */
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    /*Regains Visibility*/
    transform: translateX(0);
    /*Returns 15px back to the center*/ } }

/*Animation of -Hero Section- button. When we load the page it appears from the bottom*/
@keyframes moveInBottom {
  0% {
    opacity: 0;
    /*Starts invisible*/
    transform: translateY(4rem);
    /*Starts on the bottom*/ }
  80% {
    /*Pass over the center and goes 10px up*/
    transform: translateY(-0.5rem); }
  100% {
    opacity: 1;
    /*Regains Visibility*/
    transform: translateY(0); } }

/*I'm going to use the universal selector for a simple reset, this will select each and every element and apply the following declarations*/
*,
*::after,
*::before {
  margin: 0px;
  padding: 0px;
  box-sizing: inherit;
  /*(By default is not inherited, now, we can inherit the value declared on body tag)*/ }

/*Setting the global font size so i can add relative units to this value*/
html {
  /*If default is set to 16px, with this declaration, the html font-size will be 10px (10 / 16 = 0.625)*/
  /*If user set to 20px, our default font will be 12.5px (20*0.625=12.5)*/
  font-size: 62.5%;
  /*Now: 1rem = 10px*/ }

/*I am using this tag so i can inherit the following styling later*/
body {
  box-sizing: border-box;
  /*Borders and paddings will not add to the total width and height that we specify*/ }

/*I am using this tag so i can inherit the following styling later*/
body {
  font-family: "Lato", sans-serif;
  /*The Lato font has already been linked to Google Fonts*/
  font-weight: 400;
  line-height: 1.7;
  /*1.7 times bigger than the predefined height*/
  color: #777;
  padding: 1.5rem;
  /*The whole page will have this white padding*/ }

/*Hero h1 container. Inside there are 2 span: main and sub*/
.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /*So set the entire back part of the heading invisible to the user. It fixes the shakingness*/
  margin-bottom: 6rem;
  /*With this we add spacing with the white button*/
  /*h1 first part "Outdoors nested inside heading-primary"*/
  /*h1 second part "is where life happens nested inside heading-primary"*/ }
  .heading-primary--main {
    display: block;
    /*Block-level elements occupy the entire width & create line breaks before and after (that's what i want)*/
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    /*Assigning keyframes rules*/
    animation-duration: 1.8s;
    animation-timing-function: ease-out; }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.74;
    animation-name: moveInRight;
    /*Assigning keyframes rules*/
    animation-duration: 1.8s;
    animation-timing-function: ease-out; }

.btn {
  /*Call to action button of the hero section 2 parts: btn and btn-white*/
  /*pseudoclass to style the element on both states (before and after*/
  /*This class is for the Hero Section -call to action- button animation that makes it appear from the bottom*/
  /*Hover state effect*/
  /*Active state effect*/
  /*Styling specifically the -call to action- button on the hero section*/
  /*Element exacly like the button but behind the button, and when we hover appears and, when we hover out of the button it goes back behind the button*/ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    /*Margins and Paddings are respected*/
    border-radius: 10rem;
    transition: all 0.3s;
    /*This is the initial state for the transform animation on hover and active states*/
    position: relative;
    /*This is the reference for the absolute position of the after pseudo class*/
    font-size: 1.6rem; }
  .btn--animated {
    animation-name: moveInBottom;
    /*Keyframes rule animation so the button appears from the bottom*/
    animation-duration: 1.8s;
    animation-timing-function: ease-out;
    animation-delay: 0.75s;
    animation-fill-mode: backwards;
    /*This applies the styles of the 0% before the animation starts*/ }
  .btn:hover {
    transform: translateY(-1.5px);
    /*It moves up*/
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.3);
    /*Offsetx, y, blur, color and opacity*/
    /*Nested inside btn:hover. When we hover, apply the following styles on the after pseudo element:*/ }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.8);
      /*It gets bigger*/
      opacity: 0;
      /*So when it gets bigger also fades out*/ }
  .btn:active {
    transform: translateY(-0.5px);
    /*It moves down from the reference*/
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.4);
    /*Offsetx, y, blur, color and opacity*/ }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    /*Specify the content and display so the element appears*/
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    /*This is to hide the "new btn" behind the real button*/
    top: 0;
    /*This absolute positioning has its reference on the first element with relative positioning, in this case, the btn class, so we can hide it behind*/
    left: 0;
    z-index: -1;
    /*Defines the position when 2 elements are on top of another. I want this to be behind*/
    transition: all .4s; }

/*Style of the header*/
.header {
  height: 95vh;
  /*95 View Height unit is equivalent to 95% of the viewport height*/
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.76)), url(../img/hero.jpg);
  /*Link to the hero image*/
  background-size: cover;
  /*I want to cover all the box*/
  background-position: top;
  /*The top of the image will always stay as the main aspect, if it is need to cut the image, it will do so from elsewhere*/
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /*It has 4 clockwise coordinates x y starting top left for the clips out effect*/
  position: relative;
  /*Header is the parent of logo-box, so i added relative*/
  /*Logo container nested in the header*/
  /*text-box is to center both h1 and a -call to action- button nested in the header*/
  /*Logo image nested in the header*/ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    /*From the reference which is the parent element (header), with position relative*/
    left: 4rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    /*From the parent element (header)*/
    left: 50%;
    transform: translate(-50%, -50%);
    /*(From the element itself)*/
    text-align: center;
    /*To center the button, because it's an inline element and it works like text*/ }
  .header__logo {
    height: 3.5rem; }

.row {
  max-width: 114rem;
  background-color: #eee;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 6rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    background-color: orangered;
    float: left;
    height: 8rem; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 12rem) / 3); }
  .row .col-2-of-3 {
    width: calc( 2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 18rem) / 4); }
  .row .col-2-of-4 {
    width: calc( 2 * ((100% - 18rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - 18rem) / 4) + 6rem * 2); }
